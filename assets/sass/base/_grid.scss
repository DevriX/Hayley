// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// This is the default html and body font-size for the base rem value.
$rem-base: 16px !default;

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for components that rely on other components.
$modules: () !default;

@mixin exports($name) {
	// Import from global scope
	$modules: $modules !global;
	// Check if a module is already on the list
	$module_index: index($modules, $name);
	@if (($module_index == null) or ($module_index == false)) {
		$modules: append($modules, $name) !global;
		@content;
	}
}

//
// @functions
//


// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range, 1);
}

@function upper-bound($range) {
	@if length($range) < 2 {
		@return 999999999999;
	}
	@return nth($range, 2);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base) {
	$value: strip-unit($value) / strip-unit($base-value) * 1rem;
	@if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
	@return $value;
}

@function data($attr) {
	@if $namespace {
		@return '[data-' + $namespace + '-' + $attr + ']';
	}

	@return '[data-' + $attr + ']';
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//	 rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//	rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value: $rem-base) {
	$max: length($values);

	@if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

	$remValues: ();
	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}
	@return $remValues;
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function emCalc($values) {
	@return rem-calc($values);
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function em-calc($values) {
	@return rem-calc($values);
}

// Data attribute namespace
// styles get applied to [data-mysite-plugin], etc
$namespace: false !default;

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with browser-based text zoom or user-set defaults.

// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// If you want your base font-size to be different and not have it affect the grid breakpoints,
// set $rem-base to $base-font-size and make sure $base-font-size is a px value.
$base-font-size: 100% !default;

// $base-line-height is 24px while $base-font-size is 16px
$base-line-height: 1.5 !default;

//
// Global Foundation Mixins
//

// @mixins
//
// We use this to control border radius.
// $radius - Default: $global-radius || 4px
@mixin radius($radius:$global-radius) {
	@if $radius {
		border-radius: $radius;
	}
}

// @mixins
//
// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius:$global-radius) {
	@if ($side == left or $side == right) {
		-webkit-border-bottom-#{$side}-radius: $radius;
		-webkit-border-top-#{$side}-radius: $radius;
		border-bottom-#{$side}-radius: $radius;
		border-top-#{$side}-radius: $radius;
	} @else {
		-webkit-#{$side}-left-radius: $radius;
		-webkit-#{$side}-right-radius: $radius;
		border-#{$side}-left-radius: $radius;
		border-#{$side}-right-radius: $radius;
	}
}

// @mixins
//
// We can control whether or not we have inset shadows edges.
// $active - Default: true, Options: false
@mixin inset-shadow($active:true) {
	box-shadow: $shiny-edge-size $shiny-edge-color inset;

  @if $active { &:active {
	box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
}

// @mixins
//
// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
	transition: $property $speed $ease;
}

// @mixins
//
// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
	-webkit-box-sizing: $type; // Android < 2.3, iOS < 4
	-moz-box-sizing: $type;
	box-sizing: $type; // Chrome, IE 8+, Opera, Safari 5.1
}

// @mixins
//
// We use this to create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
	border: inset $triangle-size;
	content: "";
	display: block;
	height: 0;
	width: 0;
	@if ($triangle-direction == top) {
		border-color: $triangle-color transparent transparent transparent;
		border-top-style: solid;
	}
	@if ($triangle-direction == bottom) {
		border-color: transparent transparent $triangle-color transparent;
		border-bottom-style: solid;
	}
	@if ($triangle-direction == left) {
		border-color: transparent transparent transparent $triangle-color;
		border-left-style: solid;
	}
	@if ($triangle-direction == right) {
		border-color: transparent $triangle-color transparent transparent;
		border-right-style: solid;
	}
}

// @mixins
//


// We use this to do clear floats
@mixin clearfix {
	&:before, &:after { content: " "; display: table; }
	&:after { clear: both; }
}

// @mixins
//


// @mixins
//


// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
	clip: rect(1px, 1px, 1px, 1px);
	height: 1px;
	overflow: hidden;
	position: absolute !important;
	width: 1px;
}

// @mixins

// We use this to control font-smoothing
$font-smoothing: antialiased !default;

// We use these to control text direction settings
$text-direction: ltr !default;
$default-float: left !default;
$opposite-direction: right !default;
@if $text-direction == ltr {
	$default-float: left;
	$opposite-direction: right;
} @else {
	$default-float: right;
	$opposite-direction: left;
}

// We use this to control whether or not CSS classes come through in the gem files.
$include-html-classes: true !default;
$include-print-styles: false !default;
$include-js-meta-styles: false !default; // Warning! Meta styles are a dependancy of the Javascript.
$include-html-global-classes: $include-html-classes !default;

$column-gutter: rem-calc(30) !default;

// Media Query Ranges
$small-range: (0, 40em) !default;
$medium-range: (40.0625em, 64em) !default;
$large-range: (64.0625em, 90em) !default;
$xlarge-range: (90.0625em, 120em) !default;
$xxlarge-range: (120.0625em, 99999999em) !default;


$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

$retina: (
	"#{$screen} and (-webkit-min-device-pixel-ratio: 2)",
	"#{$screen} and (min--moz-device-pixel-ratio: 2)",
	"#{$screen} and (-o-min-device-pixel-ratio: 2/1)",
	"#{$screen} and (min-device-pixel-ratio: 2)",
	"#{$screen} and (min-resolution: 192dpi)",
	"#{$screen} and (min-resolution: 2dppx)"
);

// Legacy
$small: $medium-up;
$medium: $medium-up;
$large: $large-up;


//We use this as cursors values for enabling the option of having custom cursors in the whole site's stylesheet
$cursor-auto-value: auto !default;
$cursor-crosshair-value: crosshair !default;
$cursor-default-value: default !default;
$cursor-disabled-value: not-allowed !default;
$cursor-pointer-value: pointer !default;
$cursor-help-value: help !default;
$cursor-text-value: text !default;


@include exports("global") {

	// Meta styles are a dependancy of the Javascript.
	// Used to provide media query values for javascript components.
	// Forward slash placed around everything to convince PhantomJS to read the value.

	@if $include-js-meta-styles {

	meta.foundation-version {
		font-family: "/{{VERSION}}/";
	}

	meta.foundation-mq-small {
		font-family: "/" + unquote($small-up) + "/";
		width: lower-bound($small-range);
	}

	meta.foundation-mq-small-only {
		font-family: "/" + unquote($small-only) + "/";
		width: lower-bound($small-range);
	}

	meta.foundation-mq-medium {
		font-family: "/" + unquote($medium-up) + "/";
		width: lower-bound($medium-range);
	}

	meta.foundation-mq-medium-only {
		font-family: "/" + unquote($medium-only) + "/";
		width: lower-bound($medium-range);
	}

	meta.foundation-mq-large {
		font-family: "/" + unquote($large-up) + "/";
		width: lower-bound($large-range);
	}

	meta.foundation-mq-large-only {
		font-family: "/" + unquote($large-only) + "/";
		width: lower-bound($large-range);
	}

	meta.foundation-mq-xlarge {
		font-family: "/" + unquote($xlarge-up) + "/";
		width: lower-bound($xlarge-range);
	}

	meta.foundation-mq-xlarge-only {
		font-family: "/" + unquote($xlarge-only) + "/";
		width: lower-bound($xlarge-range);
	}

	meta.foundation-mq-xxlarge {
		font-family: "/" + unquote($xxlarge-up) + "/";
		width: lower-bound($xxlarge-range);
	}

	meta.foundation-data-attribute-namespace {
		font-family: #{$namespace};
	}

  }

  @if $include-html-global-classes {

	// Must be 100% for off canvas to work
	html, body { height: 100%; }

	// Set box-sizing globally to handle padding and border widths
	html {
		box-sizing: border-box;
	}
	*,
	*:before,
	*:after {
		@include box-sizing(inherit);
	}

	html,
	body { font-size: $base-font-size; }

	// Grid Defaults to get images and embeds to work properly
	img { max-width: 100%; height: auto; }

	img { -ms-interpolation-mode: bicubic; }

	.clearfix { @include clearfix; }

	// Hide visually and from screen readers
	.hide {
		display: none;
	}

	// Hide visually and from screen readers, but maintain layout
	.invisible { visibility: hidden; }

	// Font smoothing
	// Antialiased font smoothing works best for light text on a dark background.
	// Apply to single elements instead of globally to body.
	// Note this only applies to webkit-based desktop browsers and Firefox 25 (and later) on the Mac.
	.antialiased { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }

	// Get rid of gap under images by making them display: inline-block; by default
	img {
		display: inline-block;
		vertical-align: middle;
	}

	//
	// Global resets for forms
	//

	// Make sure textarea takes on height automatically
	textarea { height: auto; min-height: 50px; }

	// Make select elements 100% width by default
	select { width: 100%; }
	}
}

// @variables

$include-html-classes: true !default;
$include-print-styles: true !default;
$include-js-meta-styles: true !default; // Warning! Meta styles are a dependancy of the Javascript.
$include-html-global-classes: $include-html-classes !default;

$include-html-grid-classes: $include-html-classes !default;
$include-xl-html-grid-classes: false !default;

$row-width: rem-calc(960) !default;
$total-columns: 12 !default;

$last-child-float: $opposite-direction !default;

// @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
@function grid-calc($colNumber, $totalColumns) {
	$result: percentage(($colNumber / $totalColumns));
	@if $result == 0% { $result: 0; }
	@return $result;
}

//
// @mixins
//

// For creating container, nested, and collapsed rows.
//
//
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
@mixin grid-row($behavior: false) {

	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest {
		margin: 0 (-($column-gutter/2));
		max-width: none;
		width: auto;
	}

	// use @include grid-row(collapse); to collapsed a container row margins
	@else if $behavior == collapse {
		margin: 0;
		max-width: $row-width;
		width: 100%;
	}

	// use @include grid-row(nest-collapse); to collapse outer margins on a nested row
	@else if $behavior == nest-collapse {
		margin: 0;
		max-width: none;
		width: auto;
	}

	// use @include grid-row; to use a container row
	@else {
		margin: 0 auto;
		max-width: $row-width;
		width: 100%;
	}

	// Clearfix for all rows
	@include clearfix();
}

// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin grid-column(
	$columns:false,
	$last-column:false,
	$center:false,
	$offset:false,
	$push:false,
	$pull:false,
	$collapse:false,
	$float:true,
	$position:false) {

	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull {
		position: relative;
	}

	// If collapsed, get rid of gutter padding
	@if $collapse {
		padding-left: 0;
		padding-right: 0;
	}

	// Gutter padding whenever a column isn't set to collapse
	// (use $collapse:null to do nothing)
	@else if $collapse == false {
		padding-left: ($column-gutter / 2);
		padding-right: ($column-gutter / 2);
	}

	// If a column number is given, calculate width
	@if $columns {
		width: grid-calc($columns, $total-columns);

		// If last column, float naturally instead of to the right
		@if $last-column { float: $opposite-direction; }
	}

	// Source Ordering, adds left/right depending on which you use.
	@if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
	@if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }

	@if $float {
		@if $float == left or $float == true { float: $default-float; }
		@else if $float == right { float: $opposite-direction; }
		@else { float: none; }
	}

	// If centered, get rid of float and add appropriate margins
	@if $center {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		float: none;
	}

	// If offset, calculate appropriate margins
	@if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }

}

// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
@mixin grid-html-classes($size) {

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-push-#{$i} {
			@include grid-column($push:$i, $collapse:null, $float:false);
		}
		.#{$size}-pull-#{$i} {
			@include grid-column($pull:$i, $collapse:null, $float:false);
		}
	}

	.column,
	.columns { @include grid-column($columns:false, $position:true); }


	@for $i from 1 through $total-columns {
		.#{$size}-#{$i} { @include grid-column($columns:$i, $collapse:null, $float:false); }
	}

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-offset-#{$i} { @include grid-column($offset:$i, $collapse:null, $float:false); }
	}

	.#{$size}-reset-order {
		float: $default-float;
		left: auto;
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		right: auto;
	}

	.column.#{$size}-centered,
	.columns.#{$size}-centered { @include grid-column($center:true, $collapse:null, $float:false); }

	.column.#{$size}-uncentered,
	.columns.#{$size}-uncentered {
		float: $default-float;
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
	}

	// Fighting [class*="column"] + [class*="column"]:last-child
	.column.#{$size}-centered:last-child,
	.columns.#{$size}-centered:last-child{
		float: none;
	}

	// Fighting .column.<previous-size>-centered:last-child
	.column.#{$size}-uncentered:last-child,
	.columns.#{$size}-uncentered:last-child {
		float: $default-float;
	}

	.column.#{$size}-uncentered.opposite,
	.columns.#{$size}-uncentered.opposite {
		float: $opposite-direction;
	}

	.row {
		&.#{$size}-collapse {
			> .column,
			> .columns { @include grid-column($collapse:true, $float:false); }

			.row {margin-left:0; margin-right:0;}
		}
		&.#{$size}-uncollapse {
			> .column,
			> .columns {
				@include grid-column;
			}
		}
	}
}

@include exports("grid") {
	@if $include-html-grid-classes {
	.row {
		@include grid-row;

		&.collapse {
			 > .column,
			 > .columns { @include grid-column($collapse:true, $float:false); }

		.row {margin-left:0; margin-right:0;}
		}

		.row { @include grid-row($behavior:nest);
		&.collapse { @include grid-row($behavior:nest-collapse); }
		}
	}

	.column,
	.columns { @include grid-column($columns:$total-columns); }

	[class*="column"] + [class*="column"]:last-child { float: $last-child-float; }
	[class*="column"] + [class*="column"].end { float: $default-float; }

	@media #{$small-up} {
		@include grid-html-classes($size:small);

		.show-for-medium-up { display: none;}
	}

	@media #{$medium-up} {
		@include grid-html-classes($size:medium);
		// Old push and pull classes
		@for $i from 0 through $total-columns - 1 {
			.push-#{$i} {
				@include grid-column($push:$i, $collapse:null, $float:false);
			}
			.pull-#{$i} {
				@include grid-column($pull:$i, $collapse:null, $float:false);
			}
		}

		.show-for-medium-up { display: block;}
	}
	@media #{$large-up} {
		@include grid-html-classes($size:large);
		@for $i from 0 through $total-columns - 1 {
			.push-#{$i} {
				@include grid-column($push:$i, $collapse:null, $float:false);
			}
			.pull-#{$i} {
				@include grid-column($pull:$i, $collapse:null, $float:false);
			}
		}
	}
	}
	@if $include-xl-html-grid-classes {
		@media #{$xlarge-up} {
			@include grid-html-classes($size:xlarge);
		}
		@media #{$xxlarge-up} {
			@include grid-html-classes($size:xxlarge);
		}
	}
}